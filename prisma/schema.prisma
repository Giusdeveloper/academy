// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  courses       Course[]  @relation("UserCourses")
  orders        Order[]
  progress      Progress[]
  quizAttempts  QuizAttempt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Float
  image       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation("UserCourses", fields: [authorId], references: [id])
  authorId    String
  lessons     Lesson[]
  orders      Order[]
  progress    Progress[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  quizzes     Quiz[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  amount    Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Quiz {
  id           String   @id @default(cuid())
  lessonId     String
  title        String
  description  String?
  questions    Json     // Array di domande con risposte
  passingScore Int      @default(70) // Punteggio minimo per passare (percentuale)
  maxAttempts  Int      @default(3)  // Numero massimo di tentativi
  timeLimit    Int?     // Limite di tempo in minuti (opzionale)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lesson       Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts     QuizAttempt[]
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  lessonId   String
  answers    Json     // Risposte dell'utente
  score      Int      // Punteggio ottenuto (percentuale)
  passed     Boolean  @default(false)
  completedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
